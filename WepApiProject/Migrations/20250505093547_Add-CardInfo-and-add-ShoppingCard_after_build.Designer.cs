// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WepApiProject.DataContext;

#nullable disable

namespace WepApiProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250505093547_Add-CardInfo-and-add-ShoppingCard_after_build")]
    partial class AddCardInfoandaddShoppingCard_after_build
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WepApiProject.Model.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ShoppingCardId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShoppingCartId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("WepApiProject.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("SpecialTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Категория 1",
                            Description = "Сфера напрямую соответствующей важные сознания повышение всего требует сомнений и.",
                            Image = "https://placehold.co/200",
                            Name = "Фантастический Деревянный Шарф",
                            Price = 775.08000000000004,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Категория 3",
                            Description = "Для по сущности представляет внедрения общественной богатый выбранный прежде.",
                            Image = "https://placehold.co/200",
                            Name = "Невероятный Гранитный Шарф",
                            Price = 758.49000000000001,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Категория 3",
                            Description = "Структура значительной отметить.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Хлопковый Свитер",
                            Price = 104.59999999999999,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Категория 3",
                            Description = "Создание по настолько деятельности отметить.",
                            Image = "https://placehold.co/200",
                            Name = "Практичный Резиновый Носки",
                            Price = 266.35000000000002,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Категория 3",
                            Description = "Этих плановых работы для.",
                            Image = "https://placehold.co/200",
                            Name = "Практичный Стальной Ботинок",
                            Price = 57.450000000000003,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Категория 2",
                            Description = "Потребностям отношении кругу настолько с специалистов широким.",
                            Image = "https://placehold.co/200",
                            Name = "Лоснящийся Гранитный Носки",
                            Price = 891.13999999999999,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Категория 2",
                            Description = "Новых целесообразности модель.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Деревянный Свитер",
                            Price = 234.36000000000001,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Категория 1",
                            Description = "Позволяет эксперимент создаёт следует принимаемых же демократической.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Неодимовый Носки",
                            Price = 230.97999999999999,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Категория 2",
                            Description = "Всего систему важные способствует различных структуры.",
                            Image = "https://placehold.co/200",
                            Name = "Лоснящийся Стальной Ремень",
                            Price = 756.38999999999999,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Категория 1",
                            Description = "Степени формировании специалистов и.",
                            Image = "https://placehold.co/200",
                            Name = "Грубый Стальной Шарф",
                            Price = 730.49000000000001,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Категория 2",
                            Description = "Показывает повышению важные форм шагов поставленных образом другой активом.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Хлопковый Кошелек",
                            Price = 63.509999999999998,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Категория 3",
                            Description = "Определения создание всего интересный за обеспечивает различных значительной.",
                            Image = "https://placehold.co/200",
                            Name = "Грубый Гранитный Компьютер",
                            Price = 138.5,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Категория 3",
                            Description = "Качественно существующий специалистов значительной вызывает выполнять анализа.",
                            Image = "https://placehold.co/200",
                            Name = "Практичный Резиновый Носки",
                            Price = 50.869999999999997,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Категория 3",
                            Description = "Подготовке место финансовых позиции модели информационно-пропогандистское форм уточнения предложений.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Пластиковый Стул",
                            Price = 811.13,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Категория 3",
                            Description = "Значение следует сложившаяся.",
                            Image = "https://placehold.co/200",
                            Name = "Грубый Хлопковый Майка",
                            Price = 76.060000000000002,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Категория 3",
                            Description = "Анализа структуры активом консультация новых интересный.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Меховой Сабо",
                            Price = 603.03999999999996,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Категория 1",
                            Description = "Соответствующих прогрессивного материально-технической богатый целесообразности интересный различных.",
                            Image = "https://placehold.co/200",
                            Name = "Невероятный Бетонный Носки",
                            Price = 25.09,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Категория 2",
                            Description = "Поэтапного обществом профессионального важные рост организации.",
                            Image = "https://placehold.co/200",
                            Name = "Эргономичный Пластиковый Сабо",
                            Price = 763.86000000000001,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Категория 3",
                            Description = "Гражданского богатый новых социально-экономическое позволяет требует участниками.",
                            Image = "https://placehold.co/200",
                            Name = "Практичный Пластиковый Автомобиль",
                            Price = 515.83000000000004,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Категория 3",
                            Description = "Кадровой создаёт важные организации общественной отношении модели.",
                            Image = "https://placehold.co/200",
                            Name = "Практичный Меховой Ботинок",
                            Price = 724.77999999999997,
                            SpecialTag = "Новинка"
                        });
                });

            modelBuilder.Entity("WepApiProject.Model.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("WepApiProject.Model.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WepApiProject.Model.CartItem", b =>
                {
                    b.HasOne("WepApiProject.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WepApiProject.Model.ShoppingCart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WepApiProject.Model.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
