// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WepApiProject.DataContext;

#nullable disable

namespace WepApiProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WepApiProject.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("SpecialTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Категория 2",
                            Description = "Повседневная управление повседневной с мира систему целесообразности активизации форм.",
                            Image = "https://placehold.co/200",
                            Name = "Грубый Бетонный Кепка",
                            Price = 507.81999999999999,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Категория 1",
                            Description = "Принципов организационной оценить интересный шагов очевидна массового высокотехнологичная.",
                            Image = "https://placehold.co/200",
                            Name = "Практичный Натуральный Автомобиль",
                            Price = 201.65000000000001,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Категория 1",
                            Description = "Понимание новых выбранный дальнейших.",
                            Image = "https://placehold.co/200",
                            Name = "Потрясающий Неодимовый Ботинок",
                            Price = 195.28999999999999,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Категория 1",
                            Description = "Дальнейших активом повышению богатый создаёт.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Деревянный Сабо",
                            Price = 587.66999999999996,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Категория 2",
                            Description = "По социально-ориентированный образом шагов разнообразный постоянный активизации внедрения.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Меховой Стол",
                            Price = 348.66000000000003,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Категория 1",
                            Description = "С плановых сфера выбранный насущным однако в различных.",
                            Image = "https://placehold.co/200",
                            Name = "Потрясающий Кожанный Плащ",
                            Price = 248.15000000000001,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Категория 3",
                            Description = "Информационно-пропогандистское сознания вызывает высокотехнологичная представляет.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Бетонный Ножницы",
                            Price = 627.42999999999995,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Категория 1",
                            Description = "Важные проект рост обществом очевидна важные следует.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Стальной Кошелек",
                            Price = 66.939999999999998,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Категория 1",
                            Description = "Вызывает повседневной определения богатый задач воздействия забывать реализация таким.",
                            Image = "https://placehold.co/200",
                            Name = "Потрясающий Резиновый Куртка",
                            Price = 531.80999999999995,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Категория 2",
                            Description = "Качества влечёт структура сфера интересный стороны обучения рамки модернизации современного.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Пластиковый Шарф",
                            Price = 793.07000000000005,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Категория 2",
                            Description = "Развития формирования специалистов подготовке рамки качества прогресса формировании обеспечение.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Деревянный Майка",
                            Price = 176.00999999999999,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Категория 2",
                            Description = "Развития насущным новых равным предпосылки задача подготовке.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Кожанный Кошелек",
                            Price = 284.91000000000003,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Категория 3",
                            Description = "Создаёт управление создание.",
                            Image = "https://placehold.co/200",
                            Name = "Лоснящийся Хлопковый Майка",
                            Price = 685.71000000000004,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Категория 1",
                            Description = "Прежде обучения модели насущным.",
                            Image = "https://placehold.co/200",
                            Name = "Фантастический Натуральный Компьютер",
                            Price = 483.77999999999997,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Категория 2",
                            Description = "Сущности представляет реализация выбранный создание определения.",
                            Image = "https://placehold.co/200",
                            Name = "Фантастический Пластиковый Стол",
                            Price = 872.78999999999996,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Категория 3",
                            Description = "Повышение рост широким.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Бетонный Стул",
                            Price = 82.430000000000007,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Категория 2",
                            Description = "Влечёт значительной порядка подготовке нашей позиции по играет.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Деревянный Берет",
                            Price = 37.25,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Категория 2",
                            Description = "Важные и количественный организационной предпосылки обеспечение.",
                            Image = "https://placehold.co/200",
                            Name = "Фантастический Неодимовый Клатч",
                            Price = 765.30999999999995,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Категория 1",
                            Description = "Сложившаяся для систему нами.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Бетонный Автомобиль",
                            Price = 578.46000000000004,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Категория 3",
                            Description = "Профессионального важные высшего прежде.",
                            Image = "https://placehold.co/200",
                            Name = "Невероятный Гранитный Стул",
                            Price = 256.60000000000002,
                            SpecialTag = "Популярный"
                        });
                });

            modelBuilder.Entity("WepApiProject.Model.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
